// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		hardware.c
//		Purpose:	Hardware Emulation
//		Created:	22nd February 2022
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include <includes.h>

// *******************************************************************************************************************************
//												Reset Hardware
// *******************************************************************************************************************************

void HWReset(void) {	
}

// *******************************************************************************************************************************
//												  Reset CPU
// *******************************************************************************************************************************

void HWSync(void) {
}

// *******************************************************************************************************************************
//											   Handle Keystrokes
// *******************************************************************************************************************************

#include <scan_lookup.h>

void  HWScanCodeHandler(int scancode,int keydown) {
	//printf("%d %d\n",scancode,keydown);
	int n = 0;
	while (mau_table[n] != -1 && mau_table[n] != scancode) {
		n++;
	}
	if (mau_table[n] == scancode && mau_table[n] != 0 && mau_table[n] != 0x80) {		
		int mau = n | (keydown ? 0x00:0x80);
		//printf("Keyboard %x\n",mau);
		GAVIN_InsertMauFIFO(mau);
		GAVIN_FlagInterrupt(3,2); 								 						// Bit 0 of ICR 1 (Gavin SuperIO)		
		m68k_set_irq(IRQ_GAVIN_SUPERIO); 												// Interrupt level 4 (Gavin SuperIO)
	}
}
